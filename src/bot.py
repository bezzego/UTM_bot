import logging
import asyncio
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pydantic_settings import BaseSettings
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

class Settings(BaseSettings):
    bot_token: str
    clc_api_key: str

    class Config:
        env_file = ".env"
        env_file_encoding = 'utf-8'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, —É—Ä–æ–≤–µ–Ω—å, –º–æ–¥—É–ª—å –∏ —Å—Ç—Ä–æ–∫–∞)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s,%(msecs)03d | %(levelname)-8s | %(name)s | %(lineno)d - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)
logger.info("Starting bot...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.bot_token)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—è
user_data = {}    # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
user_history = {} # –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ (–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ UTM-–º–µ—Ç–æ–∫ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/JSON –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
UTM_SOURCES = [
    ("–í–ö–æ–Ω—Ç–∞–∫—Ç–µ", "vk"),
    ("Max", "max"),
    ("Instagram", "instagram"),
    ("TikTok", "tiktok"),
    ("–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏", "ok"),
    ("YouTube", "youtube"),
    ("Telegram", "telegram"),
    ("Pinterest", "pinterest"),
    ("–ì–æ—Ä–±–∏–ª–µ—Ç –±–ª–æ–≥", "gorbilet_blog"),
    ("–°–∞–π—Ç –ì–æ—Ä–±–∏–ª–µ—Ç", "site_GB")
]
UTM_MEDIUMS_PUBLICATIONS = [
    ("–í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ—Å—Ç", "vk_post"),
    ("Instagram –ø–æ—Å—Ç", "instagram_post"),
    ("Telegram –ø–æ—Å—Ç", "telegram_post"),
    ("Pinterest –ø–æ—Å—Ç", "pinterest_post"),
    ("–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ –ø–æ—Å—Ç", "ok_post"),
    ("YouTube –ø—É–±–ª–∏–∫–∞—Ü–∏—è", "youtube_post"),
    ("–ì–æ—Ä–±–∏–ª–µ—Ç –±–ª–æ–≥", "gorbilet_blog"),
    ("–°–∞–π—Ç –ì–æ—Ä–±–∏–ª–µ—Ç", "site_GB"),
]
UTM_MEDIUMS_MAILINGS = [
    ("Email", "email"),
    ("VK Direct", "vk_direct"),
    ("TG Direct", "tg_direct"),
    ("WhatsApp", "wa"),
    ("Viber", "viber"),
    ("SMS", "sms"),
]
UTM_MEDIUMS_STORIES = [
    ("Instagram Stories", "instagram_story"),
    ("VK Stories", "vk_story"),
    ("Telegram Stories", "telegram_story"),
    ("YouTube Shorts", "youtube_shorts"),
]
UTM_MEDIUMS_CHANNELS = [
    ("Telegram –∫–∞–Ω–∞–ª", "telegram_channel"),
    ("YouTube –∫–∞–Ω–∞–ª", "youtube_channel"),
    ("VK –∫–∞–Ω–∞–ª", "vk_channel"),
    ("Pinterest –∫–∞–Ω–∞–ª", "pinterest_channel"),
]
# --- UTM_CAMPAIGN —Å–ø–∏—Å–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º ---
UTM_CAMPAIGNS_SPB = [
    ("–°–ø–µ–∫—Ç–∞–∫–ª–∏ –°–ü–ë", "spektakl_spb"),
    ("–ö–∞—Ä–µ–ª–∏—è –°–ü–ë", "kareliya_spb"),
    ("–ê–≤—Ç–æ—Ç—É—Ä—ã –°–ü–ë", "avtexcursion_spb"),
    ("–ü–µ—à–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –°–ü–ë", "peshexcursion_spb"),
    ("–ü—Ä–∏–≥–æ—Ä–æ–¥ –°–ü–ë", "prigorod_spb"),
    ("–ö–æ—Ä–∞–±–ª–∏ –°–ü–ë", "korabli_spb"),
    ("–ú–µ—Å—Ç–∞ –°–ü–ë", "mesta_spb"),
    ("–ê–∫–≤–∞–ø–∞—Ä–∫–∏ –°–ü–ë", "akvapark_spb"),
    ("–ê—Ä–µ–Ω–¥–∞ –°–ü–ë", "arenda_spb"),
    ("–î—Ä—É–≥–æ–µ –°–ü–ë", "other_spb"),
    ("–ë–ª–æ–≥ –°–ü–ë", "blog_spb"),
    ("–¢—É—Ä—ã –°–ü–ë", "tury_spb"),
]

UTM_CAMPAIGNS_MSK = [
    ("–°–ø–µ–∫—Ç–∞–∫–ª–∏ –ú–°–ö", "spektakl_msk"),
    ("–≠–∫—Å–∫—É—Ä—Å–∏–∏ –ú–°–ö", "excursion_msk"),
    ("–ö–æ—Ä–∞–±–ª–∏ –ú–°–ö", "korabli_msk"),
    ("–ú–µ—Å—Ç–∞ –ú–°–ö", "mesta_msk"),
    ("–î—Ä—É–≥–æ–µ –ú–°–ö", "other_msk"),
    ("–ë–ª–æ–≥ –ú–°–ö", "blog_msk"),
    ("–ë–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∞ –ú–°–ö", "blog_rassilka_msk"),
]

UTM_CAMPAIGNS_TR = [
    ("Stories GB", "stories_GB"),
    ("Stories –¢–µ–∞—Ç—Ä", "stories_teatr"),
    ("–î–∑–µ–Ω –¢—É—Ä—Ü–∏—è", "dzen_TR"),
    ("–ë–ª–æ–≥ –¢—É—Ä—Ü–∏—è", "blog_TR"),
    ("–ë–ª–æ–≥ –∫–æ–Ω—Ç–µ–Ω—Ç –¢—É—Ä—Ü–∏—è", "blog_content_TR"),
    ("–ë–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∞ –¢—É—Ä—Ü–∏—è", "blog_rassilka_TR"),
]

UTM_CAMPAIGNS_REGIONS = [
    ("–°–æ—á–∏", "sochi"),
    ("–ö–∞–∑–∞–Ω—å", "kazan"),
    ("–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "kaliningrad"),
    ("–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "nn"),
    ("–ê–Ω–∞–ø–∞", "anapa"),
    ("–ö–∏—Å–ª–æ–≤–æ–¥—Å–∫", "kislovodsk"),
    ("–î–∞–≥–µ—Å—Ç–∞–Ω", "dagestan"),
    ("–û—Å–µ—Ç–∏—è", "osetia"),
    ("–ì–µ–ª–µ–Ω–¥–∂–∏–∫", "gelendghik"),
    ("–ö—Ä—ã–º", "crimea"),
    ("–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "sevastopol"),
    ("–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑", "vladikavkaz"),
    ("–Ø–ª—Ç–∞", "yalta"),
    ("–ü—Å–∫–æ–≤", "pskov"),
    ("–†–µ–≥–∏–æ–Ω—ã", "regions"),
    ("–Ø—Ä–æ—Å–ª–∞–≤–ª—å", "yar"),
    ("–ö–æ—Å—Ç—Ä–æ–º–∞", "kostroma"),
    ("–°—É–∑–¥–∞–ª—å", "suzdal"),
    ("–í–æ–ª–æ–≥–¥–∞", "vologda"),
    ("–†—è–∑–∞–Ω—å", "ryazan"),
    ("–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "krasnodar"),
    ("–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫", "petrozavodsk"),
    ("–†–æ—Å—Ç–æ–≤", "rostov"),
    ("–°–º–æ–ª–µ–Ω—Å–∫", "smolensk"),
    ("–í—ã–±–æ—Ä–≥", "vuborg"),
    ("–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "veliky"),
]

UTM_CAMPAIGNS_FOREIGN = [
    ("–ì—Ä—É–∑–∏—è", "georgia"),
    ("–ê–±—Ö–∞–∑–∏—è", "abhazia"),
    ("–ú–∏–Ω—Å–∫", "minsk"),
    ("–ë–∞–π–∫–∞–ª", "baikal"),
    ("–ú—É—Ä–º–∞–Ω—Å–∫", "murmansk"),
    ("–ê–ª–º–∞—Ç—ã", "almatu"),
    ("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "nsk"),
    ("–ê–Ω—Ç–∞–ª—å—è", "antalya"),
    ("–¢–±–∏–ª–∏—Å–∏", "tbilisi"),
    ("–®–∞—Ä–º-—ç–ª—å-–®–µ–π—Ö", "sharmelsheikh"),
    ("–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "vladivostok"),
    ("–°—Ç–∞–º–±—É–ª", "stambul"),
    ("–¢—É–ª–∞", "tula"),
    ("–ö–æ–ª–æ–º–Ω–∞", "kolomna"),
    ("–ë–∞–∫—É", "baku"),
    ("Lead", "lead"),
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å UTM-–º–µ—Ç–∫–∏.")
    # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM "–æ–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://)
@dp.message(lambda msg: msg.text and (msg.text.startswith("http://") or msg.text.startswith("https://")))
async def handle_base_url(message: types.Message):
    user_id = message.from_user.id
    base_url = message.text.strip()
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {"base_url": base_url}
    logger.info(f"Received base URL from user {user_id}: {base_url}")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ utm_source
    builder = InlineKeyboardBuilder()
    for name, val in UTM_SOURCES:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"src:{val}"))
    builder.adjust(3)  # –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞—Ñ–∏–∫–∞ (utm_source):", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (utm_source)
@dp.callback_query(F.data.startswith("src:"))
async def select_source(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    source_val = callback.data.split(":", 1)[1]
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    if user_id in user_data:
        user_data[user_id]["utm_source"] = source_val
    else:
        user_data[user_id] = {"utm_source": source_val}
    logger.info(f"User {user_id} selected utm_source: {source_val}")

    await callback.answer()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞ (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏")
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—ã–±–æ—Ä, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await callback.message.edit_text(f"–ò—Å—Ç–æ—á–Ω–∏–∫ (utm_source) –≤—ã–±—Ä–∞–Ω: {source_val}")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ utm_medium –ø–æ –≥—Ä—É–ø–ø–∞–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ (utm_medium):")

    # –°–ú–ú (–ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
    builder = InlineKeyboardBuilder()
    for name, val in UTM_MEDIUMS_PUBLICATIONS:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"med:{val}"))
    builder.adjust(2)
    await callback.message.answer("üì£ –°–ú–ú (–ø—É–±–ª–∏–∫–∞—Ü–∏–∏):", reply_markup=builder.as_markup())

    # –°–ú–ú (—Ä–∞—Å—Å—ã–ª–∫–∞)
    builder = InlineKeyboardBuilder()
    for name, val in UTM_MEDIUMS_MAILINGS:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"med:{val}"))
    builder.adjust(2)
    await callback.message.answer("üìß –°–ú–ú (—Ä–∞—Å—Å—ã–ª–∫–∞):", reply_markup=builder.as_markup())

    # –°–ú–ú IG (–∏—Å—Ç–æ—Ä–∏–∏)
    builder = InlineKeyboardBuilder()
    for name, val in UTM_MEDIUMS_STORIES:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"med:{val}"))
    builder.adjust(2)
    await callback.message.answer("üì± –°–ú–ú IG (–∏—Å—Ç–æ—Ä–∏–∏):", reply_markup=builder.as_markup())

    # –°–ú–ú (–∫–∞–Ω–∞–ª—ã)
    builder = InlineKeyboardBuilder()
    for name, val in UTM_MEDIUMS_CHANNELS:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"med:{val}"))
    builder.adjust(2)
    await callback.message.answer("üì° –°–ú–ú (–∫–∞–Ω–∞–ª—ã):", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ (utm_medium)
@dp.callback_query(F.data.startswith("med:"))
async def select_medium(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    medium_val = callback.data.split(":", 1)[1]
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]["utm_medium"] = medium_val
    logger.info(f"User {user_id} selected utm_medium: {medium_val}")

    await callback.answer()
    await callback.message.edit_text(f"–¢–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞ (utm_medium) –≤—ã–±—Ä–∞–Ω: {medium_val}")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–º–ø–∞–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é (utm_campaign):")

    # –°–ü–ë
    builder = InlineKeyboardBuilder()
    for name, val in UTM_CAMPAIGNS_SPB:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"camp:{val}"))
    builder.adjust(2)
    await callback.message.answer("üìç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥:", reply_markup=builder.as_markup())

    # –ú–°–ö
    builder = InlineKeyboardBuilder()
    for name, val in UTM_CAMPAIGNS_MSK:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"camp:{val}"))
    builder.adjust(2)
    await callback.message.answer("üèô –ú–æ—Å–∫–≤–∞:", reply_markup=builder.as_markup())

    # –¢—É—Ä—Ü–∏—è –∏ –∑–∞—Ä—É–±–µ–∂—å–µ
    builder = InlineKeyboardBuilder()
    for name, val in UTM_CAMPAIGNS_TR:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"camp:{val}"))
    builder.adjust(2)
    await callback.message.answer("‚úàÔ∏è –¢—É—Ä—Ü–∏—è –∏ –∑–∞—Ä—É–±–µ–∂—å–µ:", reply_markup=builder.as_markup())

    # –†–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏
    builder = InlineKeyboardBuilder()
    for name, val in UTM_CAMPAIGNS_REGIONS:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"camp:{val}"))
    builder.adjust(2)
    await callback.message.answer("üåç –†–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏:", reply_markup=builder.as_markup())

    # –ó–∞—Ä—É–±–µ–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    for name, val in UTM_CAMPAIGNS_FOREIGN:
        builder.add(InlineKeyboardButton(text=name, callback_data=f"camp:{val}"))
    builder.adjust(2)
    await callback.message.answer("üåê –ó–∞—Ä—É–±–µ–∂–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–∏ (utm_campaign)
@dp.callback_query(F.data.startswith("camp:"))
async def select_campaign(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    campaign_val = callback.data.split(":", 1)[1]
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]["utm_campaign"] = campaign_val
    logger.info(f"User {user_id} selected utm_campaign: {campaign_val}")

    await callback.answer()
    await callback.message.edit_text(f"–ö–∞–º–ø–∞–Ω–∏—è (utm_campaign) –≤—ã–±—Ä–∞–Ω–∞: {campaign_val}")

    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é UTM-—Å—Å—ã–ª–∫—É
    base_url = user_data[user_id].get("base_url", "")
    full_url = build_utm_url(base_url, user_data[user_id]["utm_source"], user_data[user_id]["utm_medium"], campaign_val)
    logger.info(f"Full UTM URL for user {user_id}: {full_url}")
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    logger.info(f"Sending to CLC: {full_url}")
    logger.debug("CLC request payload: %s", {"url": full_url})

    try:
        short_url = await shorten_url(full_url, settings.clc_api_key)
    except Exception as e:
        logger.exception(f"CLC shorten exception for user {user_id}: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if short_url is None:
        logger.error("CLC shorten returned None for user %s, url=%s", user_id, full_url)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    logger.info(f"Short URL for user {user_id}: {short_url}")
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π)
    history_list = user_history.get(user_id, [])
    history_list.append((base_url, full_url, short_url))
    user_history[user_id] = history_list[-5:]

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏
    result_text = ("‚úÖ –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n"
                   f"üîó –ò—Å—Ö–æ–¥–Ω–∞—è:\n{base_url}\n\n"
                   f"üß© –° UTM:\n{full_url}\n\n"
                   f"‚úÇÔ∏è –°–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è:\n{short_url}")
    await callback.message.answer(result_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history ‚Äì –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
@dp.message(Command("history"))
async def cmd_history(message: types.Message):
    user_id = message.from_user.id
    hist = user_history.get(user_id)
    if not hist:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å—Å—ã–ª–∫–∏.")
        return
    text_lines = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"]
    for i, (orig, full, short) in enumerate(hist, start=1):
        text_lines.append(f"{i}. {short} ‚Äî (–∏—Å—Ö–æ–¥–Ω–∞—è: {orig})")
    await message.answer("\n".join(text_lines))

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from src.services.utm_builder import build_utm_url
from src.services.clc_shortener import shorten_url

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Bot is polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())