from aiogram import F, Router, types
from aiogram.filters import Command

from src.config import settings
from src.keyboards.main_menu import build_main_menu_keyboard
from src.services.database import database
from src.state.user_state import pending_password_users


router = Router()


@router.message(Command("start"), flags={"auth_required": False})
async def cmd_start(message: types.Message) -> None:
    user_id = message.from_user.id

    if database.is_user_banned(user_id):
        pending_password_users.discard(user_id)
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if database.is_user_authorized(user_id):
        pending_password_users.discard(user_id)
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
            reply_markup=build_main_menu_keyboard(),
        )
        return

    pending_password_users.add(user_id)
    await message.answer(
        "üîí –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@router.message(lambda msg: msg.from_user.id in pending_password_users, flags={"auth_required": False})
async def handle_password(message: types.Message) -> None:
    user_id = message.from_user.id
    if not message.text:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º.")
        return

    password = message.text.strip()

    if password == settings.bot_access_password:
        database.authorize_user(user_id)
        pending_password_users.discard(user_id)
        await message.answer(
            "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=build_main_menu_keyboard(),
        )
        return

    database.ban_user(user_id, reason="invalid_password")
    pending_password_users.discard(user_id)
    await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π. –í—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")


@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def prompt_for_link(message: types.Message) -> None:
    await message.answer(
        "‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å UTM-–º–µ—Ç–∫–∏. "
        "–û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"
    )


@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
async def show_history(message: types.Message) -> None:
    user_id = message.from_user.id

    history = database.get_history(user_id, limit=20)
    if not history:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ UTM.")
        return

    text_lines = ["üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"]
    for index, (original, _, short) in enumerate(history, start=1):
        text_lines.append(f"{index}. {short} ‚Äî –∏—Å—Ö–æ–¥–Ω–∞—è: {original}")

    await message.answer("\n".join(text_lines))
